import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';

// Mock Firebase before importing components
jest.mock('firebase/app', () => ({
  initializeApp: jest.fn(),
}));

jest.mock('firebase/auth', () => ({
  getAuth: jest.fn(() => ({})),
  createUserWithEmailAndPassword: jest.fn(),
  updateProfile: jest.fn(),
  verifyPasswordResetCode: jest.fn(),
  confirmPasswordReset: jest.fn(),
}));

jest.mock('firebase/firestore', () => ({
  getFirestore: jest.fn(() => ({})),
  collection: jest.fn(),
  query: jest.fn(),
  where: jest.fn(),
  orderBy: jest.fn(),
  getDocs: jest.fn(),
  getDoc: jest.fn(),
  doc: jest.fn(),
  setDoc: jest.fn(),
  updateDoc: jest.fn(),
  serverTimestamp: jest.fn(() => 'mock-timestamp'),
}));

// Mock the authService
jest.mock('../../services/authService');

import ResetPassword from '../ResetPassword';
import authService from '../../services/authService';

// Mock useSearchParams
const mockSearchParams = new URLSearchParams();
const mockNavigate = jest.fn();

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useSearchParams: () => [mockSearchParams],
  useNavigate: () => mockNavigate,
}));

describe('ResetPassword Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockSearchParams.delete('mode');
    mockSearchParams.delete('token');
    mockSearchParams.delete('email');
    mockSearchParams.delete('oobCode');
    mockSearchParams.delete('userId');
  });

  describe('Firebase Password Reset Flow', () => {
    beforeEach(() => {
      mockSearchParams.set('mode', 'resetPassword');
      mockSearchParams.set('oobCode', 'test-firebase-code');
    });

    test('validates Firebase reset code successfully', async () => {
      authService.verifyPasswordResetCode.mockResolvedValue('test@example.com');

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByText('Reset Your Password')).toBeInTheDocument();
        expect(screen.getByText('Enter a new password for test@example.com')).toBeInTheDocument();
      });

      expect(authService.verifyPasswordResetCode).toHaveBeenCalledWith('test-firebase-code');
    });

    test('handles invalid Firebase reset code', async () => {
      authService.verifyPasswordResetCode.mockRejectedValue(new Error('Invalid code'));

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByText('Invalid Reset Link')).toBeInTheDocument();
        expect(screen.getByText(/Invalid code/)).toBeInTheDocument();
      });
    });

    test('completes Firebase password reset successfully', async () => {
      authService.verifyPasswordResetCode.mockResolvedValue('test@example.com');
      authService.confirmPasswordReset.mockResolvedValue();

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in password fields
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'NewSecurePass123!' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: 'NewSecurePass123!' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(authService.confirmPasswordReset).toHaveBeenCalledWith('test-firebase-code', 'NewSecurePass123!');
      });
    });
  });

  describe('Custom Password Reset Flow', () => {
    beforeEach(() => {
      mockSearchParams.set('mode', 'customReset');
      mockSearchParams.set('token', 'test-custom-token');
      mockSearchParams.set('email', 'test@example.com');
    });

    test('validates custom reset token successfully', async () => {
      authService.validateCustomResetToken.mockResolvedValue({
        valid: true,
        email: 'test@example.com'
      });

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByText('Reset Your Password')).toBeInTheDocument();
        expect(screen.getByText('Enter a new password for test@example.com')).toBeInTheDocument();
      });

      expect(authService.validateCustomResetToken).toHaveBeenCalledWith('test-custom-token', 'test@example.com');
    });

    test('handles invalid custom reset token', async () => {
      authService.validateCustomResetToken.mockResolvedValue({
        valid: false,
        error: 'Token has expired'
      });

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByText('Invalid Reset Link')).toBeInTheDocument();
        expect(screen.getByText(/Token has expired/)).toBeInTheDocument();
      });
    });

    test('completes custom password reset successfully', async () => {
      authService.validateCustomResetToken.mockResolvedValue({
        valid: true,
        email: 'test@example.com'
      });
      authService.completeCustomPasswordReset.mockResolvedValue({
        success: true,
        passwordStrength: 'strong'
      });

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in password fields
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'NewSecurePass123!' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: 'NewSecurePass123!' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(authService.completeCustomPasswordReset).toHaveBeenCalledWith(
          'test-custom-token',
          'test@example.com',
          'NewSecurePass123!'
        );
      });
    });
  });

  describe('New User Registration Flow', () => {
    beforeEach(() => {
      mockSearchParams.set('userId', 'test-user-id');
      mockSearchParams.set('token', 'test-new-user-token');
    });

    test('validates new user token successfully', async () => {
      authService.validateNewUserToken.mockResolvedValue({
        valid: true,
        email: 'newuser@example.com'
      });

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByText('Set Up Your Password')).toBeInTheDocument();
        expect(screen.getByText('Welcome! Please set up your password for newuser@example.com')).toBeInTheDocument();
      });

      expect(authService.validateNewUserToken).toHaveBeenCalledWith('test-user-id', 'test-new-user-token');
    });

    test('completes new user registration successfully', async () => {
      authService.validateNewUserToken.mockResolvedValue({
        valid: true,
        email: 'newuser@example.com'
      });
      authService.completeNewUserRegistration.mockResolvedValue({
        success: true,
        firebaseUid: 'firebase-uid-123',
        passwordStrength: 'strong'
      });

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in password fields
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'NewUserPass123!' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: 'NewUserPass123!' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Set Up Password/ }));

      await waitFor(() => {
        expect(authService.completeNewUserRegistration).toHaveBeenCalledWith(
          'test-user-id',
          'test-new-user-token',
          'NewUserPass123!'
        );
      });
    });
  });

  describe('Password Strength Validation', () => {
    beforeEach(() => {
      mockSearchParams.set('mode', 'customReset');
      mockSearchParams.set('token', 'test-token');
      mockSearchParams.set('email', 'test@example.com');
      
      authService.validateCustomResetToken.mockResolvedValue({
        valid: true,
        email: 'test@example.com'
      });
    });

    test('shows password strength indicator', async () => {
      authService.validatePasswordStrength.mockResolvedValue({
        isValid: false,
        issues: ['Password must be at least 8 characters long'],
        strength: 'weak'
      });

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Type a weak password
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: '123' }
      });

      await waitFor(() => {
        expect(screen.getByText('Password Strength:')).toBeInTheDocument();
        expect(screen.getByText('weak')).toBeInTheDocument();
        expect(screen.getByText('Password must be at least 8 characters long')).toBeInTheDocument();
      });

      expect(authService.validatePasswordStrength).toHaveBeenCalledWith('123');
    });

    test('shows strong password indicator', async () => {
      authService.validatePasswordStrength.mockResolvedValue({
        isValid: true,
        issues: [],
        strength: 'strong'
      });

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Type a strong password
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'StrongPassword123!' }
      });

      await waitFor(() => {
        expect(screen.getByText('Password Strength:')).toBeInTheDocument();
        expect(screen.getByText('strong')).toBeInTheDocument();
      });

      expect(authService.validatePasswordStrength).toHaveBeenCalledWith('StrongPassword123!');
    });
  });

  describe('Form Validation', () => {
    beforeEach(() => {
      mockSearchParams.set('mode', 'customReset');
      mockSearchParams.set('token', 'test-token');
      mockSearchParams.set('email', 'test@example.com');
      
      authService.validateCustomResetToken.mockResolvedValue({
        valid: true,
        email: 'test@example.com'
      });
    });

    test('validates password confirmation match', async () => {
      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in mismatched passwords
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'Password123!' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: 'DifferentPassword123!' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(screen.getByText('Passwords do not match')).toBeInTheDocument();
      });
    });

    test('validates required password field', async () => {
      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Submit form without password
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(screen.getByText('Password is required')).toBeInTheDocument();
      });
    });

    test('validates minimum password length', async () => {
      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in short password
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: '123' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: '123' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(screen.getByText('Password must be at least 6 characters long')).toBeInTheDocument();
      });
    });
  });

  describe('Password Visibility Toggle', () => {
    beforeEach(() => {
      mockSearchParams.set('mode', 'customReset');
      mockSearchParams.set('token', 'test-token');
      mockSearchParams.set('email', 'test@example.com');
      
      authService.validateCustomResetToken.mockResolvedValue({
        valid: true,
        email: 'test@example.com'
      });
    });

    test('toggles password visibility', async () => {
      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      const passwordInput = screen.getByLabelText(/New Password/);
      const toggleButton = screen.getAllByRole('button').find(btn => 
        btn.querySelector('[data-testid="VisibilityIcon"], [data-testid="VisibilityOffIcon"]')
      );

      // Initially password should be hidden
      expect(passwordInput).toHaveAttribute('type', 'password');

      // Click toggle button
      if (toggleButton) {
        fireEvent.click(toggleButton);
        expect(passwordInput).toHaveAttribute('type', 'text');

        // Click again to hide
        fireEvent.click(toggleButton);
        expect(passwordInput).toHaveAttribute('type', 'password');
      }
    });
  });

  describe('Success Flow', () => {
    beforeEach(() => {
      mockSearchParams.set('mode', 'customReset');
      mockSearchParams.set('token', 'test-token');
      mockSearchParams.set('email', 'test@example.com');
      
      authService.validateCustomResetToken.mockResolvedValue({
        valid: true,
        email: 'test@example.com'
      });
      authService.completeCustomPasswordReset.mockResolvedValue({
        success: true,
        passwordStrength: 'strong'
      });
    });

    test('shows success message and redirects', async () => {
      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in password fields
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'StrongPassword123!' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: 'StrongPassword123!' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(screen.getByText('Password Reset Complete!')).toBeInTheDocument();
        expect(screen.getByText('Your password has been successfully reset.')).toBeInTheDocument();
      });

      // Check that navigation will be called after timeout
      await waitFor(() => {
        expect(mockNavigate).toHaveBeenCalledWith('/login', {
          state: {
            message: 'Password reset successful! Please sign in with your new password.',
            email: 'test@example.com'
          }
        });
      }, { timeout: 4000 });
    });
  });

  describe('Error Handling', () => {
    beforeEach(() => {
      mockSearchParams.set('mode', 'customReset');
      mockSearchParams.set('token', 'test-token');
      mockSearchParams.set('email', 'test@example.com');
      
      authService.validateCustomResetToken.mockResolvedValue({
        valid: true,
        email: 'test@example.com'
      });
    });

    test('handles password reset errors', async () => {
      authService.completeCustomPasswordReset.mockRejectedValue(
        new Error('This password has been found in 1000 data breaches. Please choose a different password.')
      );

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in password fields
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'password123' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: 'password123' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(screen.getByText(/This password has been found in 1000 data breaches/)).toBeInTheDocument();
      });
    });

    test('handles network errors gracefully', async () => {
      authService.completeCustomPasswordReset.mockRejectedValue(
        new Error('Network error')
      );

      render(<ResetPassword />, { wrapper: BrowserRouter });

      await waitFor(() => {
        expect(screen.getByLabelText(/New Password/)).toBeInTheDocument();
      });

      // Fill in password fields
      fireEvent.change(screen.getByLabelText(/New Password/), {
        target: { value: 'StrongPassword123!' }
      });
      fireEvent.change(screen.getByLabelText(/Confirm New Password/), {
        target: { value: 'StrongPassword123!' }
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: /Reset Password/ }));

      await waitFor(() => {
        expect(screen.getByText('Failed to reset password. Please try again.')).toBeInTheDocument();
      });
    });
  });
});
